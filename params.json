{
  "name": "Fsharp-tutorial",
  "tagline": "Краткое введение в F#",
  "body": "# Краткое введение в FSharp\r\n\r\n\r\n## Особенности программирования на FSharp\r\n\r\n - основное назначение языка: программирование в функциональном стиле\r\n - отступы и пробелы имеют значение при форматировании кода\r\n - доступно окно интерпретатора, в котором можно выполнить команды (REPL)\r\n - язык F# многое взял от **OCaml**\r\n - доступны типы и библиотека .NET\r\n\r\n*Все дальнейшие примеры приведены для интерактивной оболочки. Символ '>' всегда обозначает приглашение интерпретатора и не набирается пользователем*\r\n\r\n## Пример использования .NET\r\n\r\n```F#\r\n>open System ;;\r\n>let now = DateTime.Now ;;\r\n```\r\n\r\n## Комментарии\r\n\r\n```F#\r\n// - однострочный комментарий\r\n(*\r\n Многострочный комментарий\r\n (может занимать несколько строк)\r\n*)\r\n```\r\n\r\n## REPL\r\n\r\nПри использовании **MS Visual Studio** можно открыть окно **F# interactive** и вводить команды. Можно выделить в программе текст и послать его в REPL комбинацией: *Alt+Enter*.\r\n\r\nВне *Visual Studio* запустить интерпретатор можно программой *fsi*.\r\n\r\n## Стандартные типы\r\n\r\nНиже перечислены основные типы с указанием суффиксов при связывании значений с именами:\r\n\r\n- **byte** - _uy_ - беззнаковый байт\r\n- **sbyte** - _y_ - знаковый байт\r\n- **int16** - _s_ - короткое целое\r\n- **uint16** - _us_ - беззнаковое короткое целое\r\n- **int32** - по-умолчанию - обычное целое\r\n- **uint32** - _u_ - беззнаковое целое\r\n- **int64** - _L_ - длинное целое\r\n- **uint64** - _UL_ -  беззнаковое длинное целое\r\n- **float32** - _f_ - вещественное одинарной точности\r\n- **float** - вещественное двойной точности\r\n- **decimal** - _M_ - вещественное фиксированной точности (28 цифр после запятой)\r\n\r\nПримеры создания значений:\r\n\r\n```F#\r\nlet a = 7uy\r\nlet b = -18s\r\nlet c = 0b1010101y\r\n```\r\n\r\nПримеры с возведением в степень:\r\n\r\n```F#\r\n> let d = 2UL 56;;\r\nval b : uint64 = 72057594037927936UL\r\n```\r\n\r\n## Преобразования типов\r\n\r\nЯвные преобразования типов необходимы, поскольку в языке отсутствуют неявные преобразования. \r\n\r\nФункции преобразования имеют такие же названия, что и типы, например:\r\n\r\n```F#\r\n>let e = uint64 2;;\r\nval e : uint64 = 2UL\r\n```\r\n\r\n## Сверхдлинные числа\r\n\r\n```F#\r\n>open System.Numerics;;\r\n>let f = 2I ** 200 ;;\r\nval f : BigInteger = \r\n  16069380442589902755419620923411626.......\r\n```\r\n\r\n## Символы и строки\r\n\r\nВсе символы хранятся в юникоде:\r\n\r\n```F#\r\n>let ch = 'л';;\r\nval ch : char = 'л'\r\n> int ch;;\r\nvat it : int = 1083\r\n```\r\n\r\nСтроки:\r\n\r\n```F#\r\n>let hello = \"hello, world!\";;\r\nval hello : string = \"hello, world!\"\r\n> hello.[1]\r\nval it : char = 'e'\r\n```\r\n\r\n## Функции\r\n\r\nДля функционального языка программирования **функция** - центральное понятие.\r\n\r\n```F#\r\n>let square = x * x;;\r\nval square : int -> int\r\n>square 2;;\r\nval it : int = 4\r\n```\r\n\r\nФункция **square** принимает параметр *int* и возвращает результат типа *int*.\r\n\r\n```F#\r\n> let add x y = x + y;;\r\nval add : int -> int -> int\r\n```\r\n\r\nВ данном случае функция *add* принимает два параметра и возвращает функцию, принимающую один параметр, возвращая, в свою очередь, целое число. \r\n\r\nМожно явно указать типы параметров:\r\n\r\n```F#\r\n>let add (x : float) y = x + y;;\r\nval add : float -> float -> float\r\n```\r\n\r\nПараметр обобщенного типа:\r\n\r\n```F#\r\n>let prn (x : 'a) = x;;\r\nval prn : 'a -> 'a\r\n```\r\n\r\nВ качестве обобщенного типа может использоваться любой тип. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}